name: run-gatling
description: Runs a Gatling test suite
inputs:
  javaVersion:
    description: "Java version to use"
    default: "17"
    required: true
  javaDistribution:
    description: "Java distribution to use"
    default: "microsoft"
    required: true
  pomPath:
    description: "Path to the Gatling Test Suite's pom.xml file"
    default: "test"
    required: true
  simulationClass:
    description: "Full classpath of the simulation to run"
    required: false
runs:
  using: "composite"
  steps:
    - name: Execute Gatling Test Suite
      uses: actions/setup-java@v3
      with:
        distribution: ${{ inputs.javaDistribution }}
        java-version: ${{ inputs.javaVersion }}

    - run: mvn -f $GITHUB_WORKSPACE/${{ inputs.pomPath }} gatling:test ${{ inputs.simulationClass != '' && '-Dgatling.simulationClass=' || '' }}${{ inputs.simulationClass }}
      shell: bash
  
    - name: Generate Job Summary 
      uses: actions/github-script@v6
      env:
        TEST_PATH: ${{ inputs.pomPath }}
      with:
        script: |
          const fs = require('fs')
          const pomPath = process.env.TEST_PATH
          const lastRuns = fs.readFileSync(`${pomPath}/target/gatling/lastRun.txt`).toString().trim().split('\n');

          for(const run of lastRuns) {
              const results = JSON.parse(fs.readFileSync(`${pomPath}/target/gatling/${run}/js/stats.json`).toString());
              let tableContent = [
                  [
                      {data: 'Request', header: true}, 
                      {data: 'Success ✅', header: true}, 
                      {data: 'Errors ❌', header: true}, 
                      {data: 'Min', header: true},
                      {data: 'Max', header: true},
                      {data: 'Avg.', header: true},
                      {data: 'Std. Dev.', header: true},
                      {data: 'RPS', header: true},
                  ]
              ];
              
              for(const result in results.contents) {
                  const requestMetrics = results.contents[result].stats;
                  tableContent.push([
                      requestMetrics.name,
                      requestMetrics.numberOfRequests.ok.toString(),
                      requestMetrics.numberOfRequests.ko.toString(),
                      requestMetrics.minResponseTime.total.toString(),
                      requestMetrics.maxResponseTime.total.toString(),
                      requestMetrics.meanResponseTime.total.toString(),
                      requestMetrics.standardDeviation.total.toString(),
                      requestMetrics.meanNumberOfRequestsPerSecond.total.toString(),
                  ]);
              }

              await core.summary
                  .addHeading(`Results for ${run}`)
                  .addTable(tableContent)
                  .addQuote('All times are in millisecond (ms). RPS means "Requests per Second"')
                  .write()
          }
